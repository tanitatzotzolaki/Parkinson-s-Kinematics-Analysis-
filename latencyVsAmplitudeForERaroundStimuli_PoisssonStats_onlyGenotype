from statsmodels.stats import rates
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import numpy as np

def plotLatencyVsAmplitude(config):

  baseCondition = 'Het'
  
  onlyKeepBoutsWithLatencySmallerThan = config["onlyKeepBoutsWithLatencySmallerThan"]
  onlyKeepBoutsWithLatencyBiggerThan  = config["onlyKeepBoutsWithLatencyBiggerThan"]
  onlyKeepBoutsWithFirstBendAmpOver   = config["onlyKeepBoutsWithFirstBendAmpOver"]
  plotTrialNumberWithSize             = config["plotTrialNumberWithSize"]
  plotLatencyOrAmpDependingOnSize     = config["plotLatencyOrAmpDependingOnSize"] if 'plotLatencyOrAmpDependingOnSize' in config else False
  genotypeOrCondition = config["genotypeOrCondition"]
  kinematicParametersExcelFile = config['kinematicParametersExcelFile']
  fps = config["fps"]
  simulationTimeSeconds = config["simulationTimeSeconds"]
  xAxisParameterName = config['xAxisParameterName']
  genotypeOrConditionToRemove = config['genotypeOrConditionToRemove']
  latencyCutOffForProportionsCalculation = config['latencyCutOffForProportionsCalculation']
  genotypeNbStimuliApplied = config['genotypeNbStimuliApplied']
  
  data = pd.read_excel(kinematicParametersExcelFile)
  
  print(data)

  dataToPlot = data[["BoutStart", xAxisParameterName, genotypeOrCondition, "Trial_ID"]]

  dataToPlot['BoutStart'] = dataToPlot['BoutStart']/fps - simulationTimeSeconds
  
  print("")
  print(len(dataToPlot), "bouts initially")
  
  datasetSizeBefore = len(dataToPlot)
  if onlyKeepBoutsWithLatencySmallerThan < 1:
    dataToPlot = dataToPlot[dataToPlot['BoutStart'] <= onlyKeepBoutsWithLatencySmallerThan]
  datasetSizeAfter = len(dataToPlot)
  print(datasetSizeBefore - datasetSizeAfter, "bouts removed because latency was too high (above", onlyKeepBoutsWithLatencySmallerThan, ")")
  
  datasetSizeBefore = len(dataToPlot)
  if onlyKeepBoutsWithLatencyBiggerThan > -1:
    dataToPlot = dataToPlot[dataToPlot['BoutStart'] >= onlyKeepBoutsWithLatencyBiggerThan]
  datasetSizeAfter = len(dataToPlot)
  print(datasetSizeBefore - datasetSizeAfter, "bouts removed because latency was too small (bellow", onlyKeepBoutsWithLatencyBiggerThan, ")")
  
  datasetSizeBefore = len(dataToPlot)
  if onlyKeepBoutsWithFirstBendAmpOver > -1:
    dataToPlot = dataToPlot[dataToPlot[xAxisParameterName] >= onlyKeepBoutsWithFirstBendAmpOver]
  datasetSizeAfter = len(dataToPlot)
  print(datasetSizeBefore - datasetSizeAfter, "bouts removed because first bend amplitude was too small (bellow", onlyKeepBoutsWithFirstBendAmpOver, ")")
  
  if len(genotypeNbStimuliApplied):
    statistics = pd.DataFrame({"WT":[0 for i in range(0, 7)],
                     "Mut":[0 for i in range(0, 7)],
                     "Het":[0 for i in range(0, 7)]})
    statistics.index = ['Nb of stimuli applied', 'Nb of ER responses', 'ER response rate', 'Nb of low lat ER', 'Low lat ER proportion', 'Nb of high lat ER', 'High lat ER proportion']
    significance = pd.DataFrame({baseCondition + " vs Mut":[0 for i in range(0, 3)],
                                baseCondition + " vs Het":[0 for i in range(0, 3)]})
    significance.index = ['ER response difference poisson p value', 'Low lat ER proportion difference poisson p value', 'High lat ER proportion difference poisson p value']
  
  print("")
  print(len(dataToPlot), "bouts in total after removal procedures. Of which there are:")
  allPossibleGenCondOptions = np.unique(dataToPlot[genotypeOrCondition])
  for possibleGenCondOption in allPossibleGenCondOptions:
    print(len(dataToPlot[dataToPlot[genotypeOrCondition] == possibleGenCondOption]), possibleGenCondOption, "bouts (", (len(dataToPlot[dataToPlot[genotypeOrCondition] == possibleGenCondOption]) / len(dataToPlot)) * 100, "%)")
    # Calculating ER response rate to stimuli
    if len(genotypeNbStimuliApplied):
      statistics.loc['Nb of stimuli applied', possibleGenCondOption] = genotypeNbStimuliApplied[possibleGenCondOption]
      statistics.loc['Nb of ER responses', possibleGenCondOption]    = len(dataToPlot[dataToPlot[genotypeOrCondition] == possibleGenCondOption])
      statistics.loc['ER response rate', possibleGenCondOption]      = (len(dataToPlot[dataToPlot[genotypeOrCondition] == possibleGenCondOption]) / genotypeNbStimuliApplied[possibleGenCondOption]) * 100
      # Poisson statistical significance calculation
      if possibleGenCondOption != baseCondition:
        ERrespWT    = len(dataToPlot[dataToPlot[genotypeOrCondition] == baseCondition])
        nbStimuliWT = genotypeNbStimuliApplied[baseCondition]
        ERrespOther    = len(dataToPlot[dataToPlot[genotypeOrCondition] == possibleGenCondOption])
        nbStimuliOther = genotypeNbStimuliApplied[possibleGenCondOption]
        significance.loc['ER response difference poisson p value', baseCondition + ' vs ' + possibleGenCondOption] = rates.test_poisson_2indep(ERrespWT, nbStimuliWT, ERrespOther, nbStimuliOther)[1]
  
  
  # Calculating proportions for lower and upper clusters
  if latencyCutOffForProportionsCalculation != -1:
    print("")
    dataLowerCluster = dataToPlot[dataToPlot['BoutStart'] < latencyCutOffForProportionsCalculation]
    nbBoutsInLowerCluster = len(dataLowerCluster)
    print(nbBoutsInLowerCluster, "bouts in the lower cluster")
    allPossibleGenCondOptions = np.unique(dataLowerCluster[genotypeOrCondition])
    for possibleGenCondOption in allPossibleGenCondOptions:
      proportionOfBoutsOfGenCondInLowerCluster = (len(dataLowerCluster[dataLowerCluster[genotypeOrCondition] == possibleGenCondOption]) / nbBoutsInLowerCluster) * 100
      print(proportionOfBoutsOfGenCondInLowerCluster, "% of", possibleGenCondOption, "(", len(dataLowerCluster[dataLowerCluster[genotypeOrCondition] == possibleGenCondOption]), "bouts )")
    print("")
    dataUpperCluster = dataToPlot[dataToPlot['BoutStart'] >= latencyCutOffForProportionsCalculation]
    nbBoutsInUpperCluster = len(dataUpperCluster)
    print(nbBoutsInUpperCluster, "bouts in the upper cluster")
    allPossibleGenCondOptions = np.unique(dataUpperCluster[genotypeOrCondition])
    for possibleGenCondOption in allPossibleGenCondOptions:
      proportionOfBoutsOfGenCondInLowerCluster = (len(dataUpperCluster[dataUpperCluster[genotypeOrCondition] == possibleGenCondOption]) / nbBoutsInUpperCluster) * 100
      print(proportionOfBoutsOfGenCondInLowerCluster, "% of", possibleGenCondOption, "(", len(dataUpperCluster[dataUpperCluster[genotypeOrCondition] == possibleGenCondOption]), "bouts )")
    
    if len(genotypeNbStimuliApplied):
      for possibleGenCondOption in allPossibleGenCondOptions:
        statistics.loc['Nb of low lat ER', possibleGenCondOption]       = len(dataLowerCluster[dataLowerCluster[genotypeOrCondition] == possibleGenCondOption])
        statistics.loc['Low lat ER proportion', possibleGenCondOption]  = (len(dataLowerCluster[dataLowerCluster[genotypeOrCondition] == possibleGenCondOption]) / len(dataToPlot[dataToPlot[genotypeOrCondition] == possibleGenCondOption])) * 100
        statistics.loc['Nb of high lat ER', possibleGenCondOption]      = len(dataUpperCluster[dataUpperCluster[genotypeOrCondition] == possibleGenCondOption])
        statistics.loc['High lat ER proportion', possibleGenCondOption] = (len(dataUpperCluster[dataUpperCluster[genotypeOrCondition] == possibleGenCondOption]) / len(dataToPlot[dataToPlot[genotypeOrCondition] == possibleGenCondOption])) * 100
        # Poisson statistical significance calculation
        if possibleGenCondOption != baseCondition:
          lowLatNbWT     = len(dataLowerCluster[dataLowerCluster[genotypeOrCondition] == baseCondition])
          highLatNbWT    = len(dataUpperCluster[dataUpperCluster[genotypeOrCondition] == baseCondition])
          ERrespWT       = len(dataToPlot[dataToPlot[genotypeOrCondition] == baseCondition])
          lowLatNbOther  = len(dataLowerCluster[dataLowerCluster[genotypeOrCondition] == possibleGenCondOption])
          highLatNbOther = len(dataUpperCluster[dataUpperCluster[genotypeOrCondition] == possibleGenCondOption])
          ERRespOther    = len(dataToPlot[dataToPlot[genotypeOrCondition] == possibleGenCondOption])
          significance.loc['Low lat ER proportion difference poisson p value', baseCondition + ' vs ' + possibleGenCondOption] = rates.test_poisson_2indep(lowLatNbWT, ERrespWT, lowLatNbOther, ERRespOther)[1]
          significance.loc['High lat ER proportion difference poisson p value', baseCondition + ' vs ' + possibleGenCondOption] = rates.test_poisson_2indep(highLatNbWT, ERrespWT, highLatNbOther, ERRespOther)[1]
  
  if len(genotypeNbStimuliApplied):
    print(statistics)
    statistics.to_excel('statistics.xlsx')
    print(significance)
    statistics.to_excel('significance.xlsx')
  
  # print(len(dataToPlot[dataToPlot['Condition'] == 'WT']), "bouts remain out of", 74*2, "bouts that should be triggered. Or", (len(dataToPlot[dataToPlot['Condition'] == 'WT']) / (74*2)) * 100, "%")
  # print(len(dataToPlot[dataToPlot['Condition'] == 'Parkinson']), "bouts remain out of", 74*2, "bouts that should be triggered. Or", (len(dataToPlot[dataToPlot['Condition'] == 'Parkinson']) / (74*2)) * 100, "%")
  
  if len(genotypeOrConditionToRemove):
    dataToPlot = dataToPlot[dataToPlot[genotypeOrCondition] != genotypeOrConditionToRemove]
    print("")
    print(len(dataToPlot), "bouts after removal of", genotypeOrConditionToRemove)
  
  dataToPlot = dataToPlot.reset_index()
  
  if plotTrialNumberWithSize:
    
    dataToPlot['TrialNumber'] = 0
    for i in range(0, len(dataToPlot)):
      textLength = len(dataToPlot['Trial_ID'][i])
      characterNminusOne = dataToPlot['Trial_ID'][i][textLength-2:textLength-1]
      trialNumber = ''
      if characterNminusOne == "_" or characterNminusOne == "t" or characterNminusOne == ".":
        trialNumber = dataToPlot['Trial_ID'][i][textLength-1:textLength]
      else:
        trialNumber = dataToPlot['Trial_ID'][i][textLength-2:textLength]
      dataToPlot['TrialNumber'][i] = int(trialNumber)
    
    sns.relplot(data=dataToPlot, x=xAxisParameterName, y="BoutStart", hue=genotypeOrCondition, size="TrialNumber")
    
    if plotLatencyOrAmpDependingOnSize:
      sns.relplot(data=dataToPlot, x="TrialNumber", y="BoutStart", hue=genotypeOrCondition)
      sns.relplot(data=dataToPlot, x="TrialNumber", y="BoutStart", hue=genotypeOrCondition, kind="line")
      sns.relplot(data=dataToPlot, x="TrialNumber", y=xAxisParameterName, hue=genotypeOrCondition)
      sns.relplot(data=dataToPlot, x="TrialNumber", y=xAxisParameterName, hue=genotypeOrCondition, kind="line")
      
  else:
    
    sns.relplot(data=dataToPlot, x=xAxisParameterName, y="BoutStart", hue=genotypeOrCondition)

  plt.show()

  
configPink1 = {
  'kinematicParametersExcelFile' : 'pink1_ER_All_SKF38393_allBoutsMixed_Copy.xlsx', #'globalParametersInsideCategories.xlsx',
  'genotypeOrCondition' : "Genotype", # Set this to either "Genotype" or "Condition"
  'genotypeOrConditionToRemove' : '', # Set to name of condition or genotype to remove a specific condition or genotype from your dataset; or otherwise set to '' to keep all
  'fps' : 650, # fps at which the video was recorded
  'simulationTimeSeconds' : 0.212, # Time in second when the stimuli was applied
  'xAxisParameterName' : 'maxTailAngleAmplitude',   # Name of the parameter to plot on the x axis (amplitude related)
  'onlyKeepBoutsWithLatencySmallerThan' : 0.1,   # Set to 1 to keep all bouts (unit in seconds)
  'onlyKeepBoutsWithLatencyBiggerThan' : 0, # Set to -1 to keep all bouts (unit in seconds)
  'onlyKeepBoutsWithFirstBendAmpOver' : 50,      # Set to -1 to keep all bouts (unit in degrees)
  'latencyCutOffForProportionsCalculation' : 0.02, # Set to a value >0 to calculate proportion of each genotype/condition in both the lower and upper clusters; Set to -1 otherwise
  'genotypeNbStimuliApplied' : {'Mut': 67*10, 'Het': 91*10}, # Set to [] if unknown
  'plotTrialNumberWithSize' : False 
  }
 
configPark2 = {
  'kinematicParametersExcelFile' : 'globalParametersInsideCategories_park2_all.xlsx', #'globalParametersInsideCategories.xlsx',
  'genotypeOrCondition' : "Genotype", # Set this to either "Genotype" or "Condition"
  'genotypeOrConditionToRemove' : 'Het', # Set to name of condition or genotype to remove a specific condition or genotype from your dataset; or otherwise set to '' to keep all
  'fps' : 650, # fps at which the video was recorded
  'simulationTimeSeconds' : 0.212, #0.212, # Time in second when the stimuli was applied
  'xAxisParameterName' : 'maxTailAngleAmplitude',   # Name of the parameter to plot on the x axis (amplitude related)
  'onlyKeepBoutsWithLatencySmallerThan' : 0.1,   # Set to 1 to keep all bouts (unit in seconds)
  'onlyKeepBoutsWithLatencyBiggerThan' : 0, # Set to -1 to keep all bouts (unit in seconds)
  'onlyKeepBoutsWithFirstBendAmpOver' : 50,      # Set to -1 to keep all bouts (unit in degrees)
  'latencyCutOffForProportionsCalculation' : 0.02, # Set to a value >0 to calculate proportion of each genotype/condition in both the lower and upper clusters; Set to -1 otherwise
  'genotypeNbStimuliApplied' : {'Mut': 57*10, 'WT': 66*10, 'Het': 106*10}, # Set to [] if unknown
  'plotTrialNumberWithSize' : False 
}

configPark7 = {
  'kinematicParametersExcelFile' : 'globalParametersInsideCategories_park7_all.xlsx', #'globalParametersInsideCategories.xlsx',
  'genotypeOrCondition' : "Genotype", # Set this to either "Genotype" or "Condition"
  'genotypeOrConditionToRemove' : 'Het', # Set to name of condition or genotype to remove a specific condition or genotype from your dataset; or otherwise set to '' to keep all
  'fps' : 650, # fps at which the video was recorded
  'simulationTimeSeconds' : 0.212, #0.212, # Time in second when the stimuli was applied
  'xAxisParameterName' : 'maxTailAngleAmplitude',   # Name of the parameter to plot on the x axis (amplitude related)
  'onlyKeepBoutsWithLatencySmallerThan' : 0.1,   # Set to 1 to keep all bouts (unit in seconds)
  'onlyKeepBoutsWithLatencyBiggerThan' : 0, # Set to -1 to keep all bouts (unit in seconds)
  'onlyKeepBoutsWithFirstBendAmpOver' : 50,      # Set to -1 to keep all bouts (unit in degrees)
  'latencyCutOffForProportionsCalculation' : 0.02, # Set to a value >0 to calculate proportion of each genotype/condition in both the lower and upper clusters; Set to -1 otherwise
  'genotypeNbStimuliApplied' : {'Mut': 113*10, 'WT': 81*10, 'Het': 203*10}, # Set to [] if unknown
  'plotTrialNumberWithSize' : False 
}

configSnca = {
  'kinematicParametersExcelFile' : 'snca_Untreated_ER_2022.xlsx', #'globalParametersInsideCategories.xlsx',
  'genotypeOrCondition' : "Genotype", # Set this to either "Genotype" or "Condition"
  'genotypeOrConditionToRemove' : '', # Set to name of condition or genotype to remove a specific condition or genotype from your dataset; or otherwise set to '' to keep all
  'fps' : 650, # fps at which the video was recorded
  'simulationTimeSeconds' : 0.200, #0.200, # Time in second when the stimuli was applied
  'xAxisParameterName' : 'maxTailAngleAmplitude',   # Name of the parameter to plot on the x axis (amplitude related)
  'onlyKeepBoutsWithLatencySmallerThan' : 0.1,   # Set to 1 to keep all bouts (unit in seconds)
  'onlyKeepBoutsWithLatencyBiggerThan' : 0, # Set to -1 to keep all bouts (unit in seconds)
  'onlyKeepBoutsWithFirstBendAmpOver' : 50,      # Set to -1 to keep all bouts (unit in degrees)
  'latencyCutOffForProportionsCalculation' : 0.02, # Set to a value >0 to calculate proportion of each genotype/condition in both the lower and upper clusters; Set to -1 otherwise
  'genotypeNbStimuliApplied' : {'Mut': 238*10, 'WT': 220*10}, # Set to [] if unknown
  'plotTrialNumberWithSize' : False 
}

configLrrk2 = {
  'kinematicParametersExcelFile' : 'lrrk2_ER_All_SKF38393_allBoutsMixed.xlsx', #'globalParametersInsideCategories.xlsx',
  'genotypeOrCondition' : "Genotype", # Set this to either "Genotype" or "Condition"
  'genotypeOrConditionToRemove' : 'Het', # Set to name of condition or genotype to remove a specific condition or genotype from your dataset; or otherwise set to '' to keep all
  'fps' : 650, # fps at which the video was recorded
  'simulationTimeSeconds' : 0.212, #0.212, # Time in second when the stimuli was applied
  'xAxisParameterName' : 'maxTailAngleAmplitude',   # Name of the parameter to plot on the x axis (amplitude related)
  'onlyKeepBoutsWithLatencySmallerThan' : 0.1,   # Set to 1 to keep all bouts (unit in seconds)
  'onlyKeepBoutsWithLatencyBiggerThan' : 0, # Set to -1 to keep all bouts (unit in seconds)
  'onlyKeepBoutsWithFirstBendAmpOver' : 50,      # Set to -1 to keep all bouts (unit in degrees)
  'latencyCutOffForProportionsCalculation' : 0.02, # Set to a value >0 to calculate proportion of each genotype/condition in both the lower and upper clusters; Set to -1 otherwise
  'genotypeNbStimuliApplied' : {'Mut': 58*10, 'WT': 33*10, 'Het': 27*10}, # Set to [] if unknown
  'plotTrialNumberWithSize' : False 
}


# plotLatencyVsAmplitude(configPark2)

# plotLatencyVsAmplitude(configPink1)

plotLatencyVsAmplitude(configSnca)

# plotLatencyVsAmplitude(configPark7)

# plotLatencyVsAmplitude(configLrrk2)

